<?php

declare(strict_types=1);

namespace DefaultValue\Dockerizer\Console\CommandOption\OptionDefinition;

use DefaultValue\Dockerizer\Console\CommandOption\ValidationException as OptionValidationException;
use DefaultValue\Dockerizer\Docker\Compose\Composition\Service;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Question\Question;

/**
 * Very simple way to ask for additional services, all groups at once.
 * Ideally, it would be better to ask for every group one by one to eliminate the case when multiple services from the
 * same group are selected
 */
class RequiredServices extends \DefaultValue\Dockerizer\Console\CommandOption\OptionDefinition\Service\AbstractService
{
    public const OPTION_NAME = 'required-services';

    public const SERVICE_TYPE = Service::TYPE_REQUIRED;

    /**
     * Accumulate selected services in case user does not enter services for all groups from the first time
     *
     * @var array $value
     */
    private array $value = [];

    /**
     * The value is optional because we actually can have 0 required services...
     *
     * @inheritDoc
     */
    public function getMode(): int
    {
        return InputOption::VALUE_OPTIONAL;
    }

    /**
     * @inheritDoc
     */
    public function getDescription(): string
    {
        return 'List of required services (comma-separated): --required-service-mysql=mysql_8.0_persistent';
    }

    public function getQuestion(): ?Question
    {
        return parent::getQuestion(); // TODO: Change the autogenerated stub
    }

    /**
     *
     * @inheritDoc
     */
    public function validate(mixed $value): array
    {
        $this->value = array_merge(parent::validate($value), $this->value);

        // Validate there are no groups without services
        if ($services = $this->getServicesForUnselectedGroups($this->getServicesWithGroupInfo())) {
            throw new OptionValidationException(
                'Missed services for the following groups: ' . implode(', ', array_unique($services))
            );
        }

        return $this->value;
    }
}
